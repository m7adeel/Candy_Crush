; MUHAMMAD ADEEL 
; FAZIHA IKHLAQ  

.MODEL SMALL
.STACK 100h
.DATA
	SAVEMODE DB ?

	; VARIABLE FOR STORING THE SCORE OF A PLAYER
	SCORE DW 0
	
	; VARIABLE FOR MOVES
	MOVES_COUNT DW 15	
	
	; FILE FOR HIGH SCORE
	FILENAME DB 'HSCORE.TXT',0
	
	; FILE POINTER
	FILEPOINTER DW ?
	
	; COLORS
	BLACK DW 0
	BLUE DW 1
	GREEN DW 2
	CYAN DW 3
	RED DW 4
	PURPLE DW 5
	BROWN DW 6
	GREY DW 7
	D_GREY DW 8
	L_BLUE DW 9
	L_GREEN DW 0AH
	CB DW 0BH
	L_RED DW 0CH
	PINK DW 0DH
	YELLOW DW 0EH
	WHITE DW 0FH
	
	; TEMPORARY VARIABLE
	TEMP DB 0
	
	; GAME BOARD SCREEN
	G_X_START DW 40
	G_Y_START DW 50
	G_X_END DW 440
	G_Y_END DW 440
	
	; COORDINATES FOR BOXES
	B_Y DW 98,155,212,269,326,383,435
	B_X DW 48,105,162,219,276,333,390
	
	; STORAGE FOR THE MOUSE COORDINATES
	MC_X DW ?
	MC_Y DW ?
	
	; STORE THE INDEX OF CANDIES TO BE SWAPPED
	CANDY_1_R DW ?
	CANDY_2_R DW ?
	CANDY_1_C DW ?
	CANDY_2_C DW ?
	SELECTED_CANDIES DB 0
	
	; COORDINATES FOR THE OPTIONS MENU
	OPTION_X_S DW 250
	OPTION_X_E DW 390
	OPTION1_Y_S DW 390
	OPTION1_Y_E DW 340
	OPTION2_Y_S DW 460
	OPTION2_Y_E DW 410
	
	; TARGET SCORE
	LVL1 DW 40
	LVL2 DW 85
	LVL3 DW 135
	
	; OPTION SELECTED
	OPTION_CHOSEN DB 0		; 0 IS FOR NEW GAME AND 1 IS FOR RULES
	
	; NAME OF THE PLAYER 
	_PLAYER_NAME DB '                             $'
	_PLAYER_NAME_LEN DW $-_PLAYER_NAME
	
	; PROMPT TO DISPLAY THE NAME
	NAME_MSG DB 'ENTER YOUR NAME : $'
	
	NEW_GAME_MSG DB 'NEW GAME$'
	RULES_MSG DB 'RULES$'
	
	; DISPLAYING THE SCORE
	SCORE_DISPLAY_MSG DB 'SCORE : $'
	MOVES_PROMPT DB '      MOVES : $'
	
	; FILL DOWN ARRAY VARIABLE TO CHECK SWAP CONDITION
	BOOL_SWAP DB 0
	RANDOM_NUMBER DB 0 ; THIS IS THE STORAGE FOR RANDOM NUMBER
	
	; GAME ARRAY ; A 7 * 7 ARRAY REPRESENTING THE CANDIES NUMBERS IN RESPECTIVE GRIDS
	CANDIES_ARR DB 49 DUP(0)
	
	; RULES OF THE GAME
	RULES_ARR0 DB '                              ===========',10,13,
	              '                              || RULES ||',10,13,
				  '                              ===========',10,13,10,13,10,13,'$'
	RULES_ARR1	DB '1) When a level begins (or even during the level), keep an eye on a few things,    namely:',10,13,'   -the target score that you have to achieve (in the top-right corner)',10,13,'   -the number of moves you have left, the amount of time remaining, and/or the     number of candies and/or candy combinations left to clear',10,13,10,13,10,13,'$'
	RULES_ARR2 DB '2) To play, click on one of the candies, and then click on an adjacent candy to    have them swap places.',' This will eliminate those candies from the board, and    they will be filled in by the candies above them (or by random candies from     the top of the board)',10,13,10,13,10,13,'$'
	RULES_ARR3 DB '3) During crushing, the score added depends on the size of combo. A combo of 3     adds 3 to the score. A combo of 4 will add 4 and so on...$'
	
.CODE
MAIN PROC
	; LOCATE THE DATA SEGMENT
	MOV AX,@DATA
	MOV DS,AX
	
	; SAVING PREVIOUS MODE
	MOV AH,0FH
	INT 10H
	MOV SAVEMODE,AL

	; SWITCHTING TO GRAPHICS MODE
	MOV AH,00H
	MOV AL,12H			; THE VIDEO MODE 640 x 480 pixel
	INT 10H	
	
	;---------------------MAIN SCREEN---------------------
	
	CALL DRAW_MAIN_SCREEN
	
	CALL DRAW_OPTIONS_SCREEN
	
	MAIN_SCREEN_DISPLAYED:
	
	.IF(OPTION_CHOSEN == 1)
		CALL SHOW_RULES
		CALL DRAW_MAIN_SCREEN
		CALL DRAW_OPTIONS_SCREEN
		JMP MAIN_SCREEN_DISPLAYED
	.ENDIF
	
	MOV AX,0H
	INT 33H
	
	;-----------------------------------------------------
	
	
	CALL FILL_ARR		; FILLING THE CANDIES ARRAY
	
	; REFRESH THE SCREEN
	; SWITCHTING TO GRAPHICS MODE
	MOV AH,00H
	MOV AL,12H			; THE VIDEO MODE 640 x 480 pixel
	INT 10H	
	
	CALL INPUT_NAME		; ASK THE USER TO ENTER THEIR NAME
	
	; REFRESH THE SCREEN
	; SWITCHTING TO GRAPHICS MODE
	MOV AH,00H
	MOV AL,12H			; THE VIDEO MODE 640 x 480 pixel
	INT 10H	
	
	; ------------------GAME LOGIC AREA--------------------
	
	; FIRST HIDE THE MOUSE SO THAT PIXELS ARE DRAWN WITHOUT ANY PROBLEM
	MOV AX,00
	INT 33H
	
	CALL DISPLAY_BOARD
	
	CALL DRAW_CANDIES
	
	CALL DRAW_SCORE_BAR
	
	; NOW WE DISPLAY THE MOUSE
	MOV AX,01
	INT 33H
	
	; LEVEL 1 
	
	GAMING_LOOP:

		CALL GAMMING_FUNC
		.IF(MOVES_COUNT == 14)
			MOV SCORE,0
		.ENDIF

		CALL DISPLAY_TITLE_BAR
		
		MOV AX,SCORE
		
		.IF(AX >= LVL1)
			JMP LVL1_END
		.ENDIF
		
		.IF(MOVES_COUNT == 0)
			JMP END_OF_GAME
		.ENDIF
		
		JMP GAMING_LOOP
		
	LVL1_END:
	
	MOV MOVES_COUNT,15
	
	; SET THE SCREEN FOR LEVEL TWO
	; FIRST MOVE 0 SO THAT WE DRAW BLANK BLOCKS
	; THEN MOV 9 WHICH REPRESENTS  LOCK
	MOV [CANDIES_ARR+0],0
	MOV [CANDIES_ARR+3],0
	MOV [CANDIES_ARR+6],0
	MOV [CANDIES_ARR+7],0
	MOV [CANDIES_ARR+13],0
	MOV [CANDIES_ARR+21],0
	MOV [CANDIES_ARR+27],0
	MOV [CANDIES_ARR+35],0
	MOV [CANDIES_ARR+41],0
	MOV [CANDIES_ARR+42],0
	MOV [CANDIES_ARR+45],0
	MOV [CANDIES_ARR+48],0
	
	CALL DRAW_CANDIES
	
	; NOW LOCK THE BLANK SPACES
	MOV [CANDIES_ARR+0],9
	MOV [CANDIES_ARR+3],9
	MOV [CANDIES_ARR+6],9
	MOV [CANDIES_ARR+7],9
	MOV [CANDIES_ARR+13],9
	MOV [CANDIES_ARR+21],9
	MOV [CANDIES_ARR+27],9
	MOV [CANDIES_ARR+35],9
	MOV [CANDIES_ARR+41],9
	MOV [CANDIES_ARR+42],9
	MOV [CANDIES_ARR+45],9
	MOV [CANDIES_ARR+48],9	
	
	
	; LEVEL 2
	
	GAMING_LOOP1:

		CALL GAMMING_FUNC

		CALL DISPLAY_TITLE_BAR
		
		MOV AX,SCORE
		
		.IF(AX >= LVL2)
			JMP LVL2_END
		.ENDIF
		
		.IF(MOVES_COUNT == 0)
			JMP END_OF_GAME
		.ENDIF
		
		JMP GAMING_LOOP1	
	
	LVL2_END:
	
	MOV MOVES_COUNT,15
	
	; SET THE SCREEN FOR LEVEL THREE
	; FIRST MOVE 0 SO THAT WE DRAW BLANK BLOCKS AND ALSO SET ALL OF THE PREVIOUS TO ZERO
	; THEN MOV 9 WHICH REPRESENTS  LOCK
	MOV [CANDIES_ARR+0],0
	MOV [CANDIES_ARR+3],0
	MOV [CANDIES_ARR+6],0
	MOV [CANDIES_ARR+7],0
	MOV [CANDIES_ARR+13],0
	MOV [CANDIES_ARR+21],0
	MOV [CANDIES_ARR+27],0
	MOV [CANDIES_ARR+35],0
	MOV [CANDIES_ARR+41],0
	MOV [CANDIES_ARR+42],0
	MOV [CANDIES_ARR+45],0
	MOV [CANDIES_ARR+48],0
	
	CALL FILL_AFTER_DESTROY
	
	MOV [CANDIES_ARR+3],0
	MOV [CANDIES_ARR+10],0
	MOV [CANDIES_ARR+17],0
	MOV [CANDIES_ARR+21],0
	MOV [CANDIES_ARR+22],0
	MOV [CANDIES_ARR+23],0
	MOV [CANDIES_ARR+24],0
	MOV [CANDIES_ARR+25],0
	MOV [CANDIES_ARR+26],0
	MOV [CANDIES_ARR+27],0
	MOV [CANDIES_ARR+31],0
	MOV [CANDIES_ARR+38],0
	MOV [CANDIES_ARR+45],0
	
	CALL DRAW_CANDIES
	
	; NOW LOCK THE BLANK SPACES
	MOV [CANDIES_ARR+3],9
	MOV [CANDIES_ARR+10],9
	MOV [CANDIES_ARR+17],9
	MOV [CANDIES_ARR+21],9
	MOV [CANDIES_ARR+22],9
	MOV [CANDIES_ARR+23],9
	MOV [CANDIES_ARR+24],9
	MOV [CANDIES_ARR+25],9
	MOV [CANDIES_ARR+26],9
	MOV [CANDIES_ARR+27],9
	MOV [CANDIES_ARR+31],9
	MOV [CANDIES_ARR+38],9
	MOV [CANDIES_ARR+45],9
	
	; LEVEL 3
	
	GAMING_LOOP2:

		CALL GAMMING_FUNC

		CALL DISPLAY_TITLE_BAR
		
		MOV AX,SCORE
		
		.IF(AX >= LVL3)
			JMP END_OF_GAME
		.ENDIF
		
		.IF(MOVES_COUNT == 0)
			JMP END_OF_GAME
		.ENDIF
		
		JMP GAMING_LOOP2	
	
	;------------------------------------------------------
	
	END_OF_GAME:
	
	; WAIT FOR KEY PRESS
	MOV AH,00
	INT 16H
	
	CALL WRITEFILE
	
	; RETURN TO PREVIOUS MODE
	MOV AH,00
	MOV AL,SAVEMODE
	INT 10H
	
	MOV AH,4CH
	INT 21H
	
MAIN ENDP

;---------------------------------------------------------------
; INITIALIZES THE CANDIES ARRAY
;---------------------------------------------------------------
FILL_ARR PROC
	
	MOV SI,OFFSET CANDIES_ARR
	
	MOV CX,49
	FILL_ARR_LOOP:
		PUSH CX
		CALL GENERATE_RANDOM_NUMBER
		MOV AL,RANDOM_NUMBER
		MOV BYTE PTR[SI],AL
		INC SI
		POP CX
		LOOP FILL_ARR_LOOP
	
	RET
FILL_ARR ENDP

;---------------------------------------------------------------
; DRAWS THE CANDIES ON THE BOARD
;---------------------------------------------------------------
DRAW_CANDIES PROC
	
	MOV BX,0	; X AXIS 
	MOV SI,0	; Y AXIS
	MOV DI,OFFSET CANDIES_ARR
	DRAW_CD_LOOP_OUTER:
		MOV BX,0
		DRAW_CD_LOOP_INNER:
			PUSH DI
			PUSH BX
			PUSH SI
			PUSH B_X + [BX]
			PUSH B_Y + [SI]
			
			MOV AL,BYTE PTR[DI]
			
			.IF(AL == 1)
				CALL DRAW_CANDY1
			.ELSEIF(AL == 2)
				CALL DRAW_CANDY2
			.ELSEIF(AL == 3)
				CALL DRAW_CANDY3
			.ELSEIF(AL == 4)
				CALL DRAW_CANDY4
			.ELSEIF(AL == 5)
				CALL DRAW_CANDY5
			.ELSEIF(AL == 0)
				CALL DRAW_GREY_SQUARE
			.ELSEIF(AL == 9)
				CALL DRAW_GREY_SQUARE
			.ELSE
				POP AX
				POP AX
			.ENDIF
			
			POP SI
			POP BX
			POP DI
			INC DI
			ADD BX,2
			CMP BX,14
			JNE DRAW_CD_LOOP_INNER
		
		ADD SI,2
		CMP SI,14
		JNE DRAW_CD_LOOP_OUTER
		
		
	
	RET
DRAW_CANDIES ENDP


;---------------------------------------------------------------
; DRAWS THE GAME BOARD
;---------------------------------------------------------------
DISPLAY_BOARD PROC
	
	; FIRST MAKE THE OUTER BOX
	
	; FILLING MAIN GAME SCREEN
	PUSH G_Y_START
	FILL_SCR_LOOP:
		PUSH G_X_START
		PUSH G_Y_START
		PUSH G_X_END
		PUSH GREY
		CALL DRAW_HLINE
		INC G_Y_START
		MOV BX,G_Y_START
		CMP BX,G_Y_END
		JL FILL_SCR_LOOP
	
	POP G_Y_START
	
	; HORIZONTAL LINES
	PUSH G_Y_START
	FILL_SCR_LOOP_HLINES:
		PUSH G_X_START
		PUSH G_Y_START
		PUSH G_X_END
		PUSH D_GREY
		CALL DRAW_HLINE
		ADD G_Y_START,57
		MOV BX,G_Y_START
		CMP BX,G_Y_END
		JL FILL_SCR_LOOP_HLINES
		
	POP G_Y_START
	
	; VERTICAL LINES
	PUSH G_X_START
	FILL_SCR_LOOP_VLINES:
		PUSH G_X_START
		PUSH G_Y_START
		PUSH G_Y_END
		PUSH D_GREY
		CALL DRAW_VLINE
		ADD G_X_START,57
		MOV BX,G_X_START
		CMP BX,G_X_END
		JL FILL_SCR_LOOP_VLINES
		
	POP G_X_START	

	RET
DISPLAY_BOARD ENDP

;----------------------------------------------------------------
; DRAWS HORIZONTAL LINE USING STACK FIRST PUSH X VALUE THEN Y VALUE
; THEN PUSH THE ENDING X VALUE AND IN THE END PUSH COLOR 
;----------------------------------------------------------------
DRAW_HLINE PROC
	PUSH BP
	MOV BP,SP
	
	MOV CX,[BP+10]	; X COORDINATE
	MOV DX,[BP+8]	; Y COORDINATE
	MOV AL,[BP+4]	; COLOR
	MOV AH,0CH		; FOR A PIXEL
	MOV BH,0
	
	CMP CX,[BP+6]
	; IF CX IS GREATER THAN WE WILL DEC CX
	JG DRAW_HLINE_LOOP_DEC
	
	DRAW_HLINE_LOOP_INC:
		INT 10H
		INC CX
		CMP CX,[BP+6]
		JNE DRAW_HLINE_LOOP_INC
		
	JMP DRAW_HLINE_END		; WE DO NOT WANT THE DEC PART TO RUN
		
	DRAW_HLINE_LOOP_DEC:
		INT 10H
		DEC CX
		CMP CX,[BP+6]
		JNE DRAW_HLINE_LOOP_DEC
		
	DRAW_HLINE_END:
	
	POP BP
	RET 8
DRAW_HLINE ENDP

;----------------------------------------------------------------
; DRAWS VERTICAL LINE USING STACK FIRST PUSH X VALUE THEN Y VALUE
; THEN PUSH THE ENDING Y VALUE AND IN THE END PUSH COLOR 
;----------------------------------------------------------------
DRAW_VLINE PROC
	PUSH BP
	MOV BP,SP
	
	MOV CX,[BP+10]	; X COORDINATE
	MOV DX,[BP+8]	; Y COORDINATE
	MOV AX,[BP+4]	; COLOR
	MOV AH,0CH		; FOR A PIXEL
	MOV BH,0
		
	CMP DX,[BP+6]
	; IF DX IS GREATER THAN WE WILL DEC DX
	JG DRAW_VLINE_LOOP_DEC
	
	DRAW_VLINE_LOOP_INC:
		INT 10H
		INC DX
		CMP DX,[BP+6]
		JNE DRAW_VLINE_LOOP_INC
		
	JMP DRAW_VLINE_END		; WE DO NOT WANT THE DEC PART TO RUN
		
	DRAW_VLINE_LOOP_DEC:
		INT 10H
		DEC CX
		CMP CX,[BP+6]
		JNE DRAW_VLINE_LOOP_DEC
		
	DRAW_VLINE_END:	
	
	POP BP
	RET 8
DRAW_VLINE ENDP

;-------------------------------------------------------------
; PUSH THE LOWER LEFT X AND THEN LOWER LEFT Y AXIS		
;-------------------------------------------------------------
DRAW_CANDY1 PROC
	PUSH BP
	MOV BP,SP
	
	MOV CX,[BP+6]	; X COORDINATE
	MOV DX,[BP+4]	; Y COORDINATE
	MOV AX,GREEN
	MOV AH,0CH
	MOV BH,0
	
	; ADDING 40 PIXELS SO WE GET 40*40 SQUARE
	MOV SI,[BP+6]
	ADD SI,40
	MOV DI,[BP+4]
	SUB DI,40
	
	DRAW_CD1_OUTER:
		PUSH CX
		DRAW_CD1_INNER:
			INT 10H
			ADD CX,1
			CMP CX,SI
			JNE DRAW_CD1_INNER
		POP CX
		DEC DX
		CMP DX,DI
		JNE DRAW_CD1_OUTER	
		
	; ADDING DETAILS
	
	; ROUNDING THE SIDES OF THE SQUARE
	MOV AX,GREY
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	MOV AH,0CH
	INT 10H
	
	INC CX
	INT 10H
	
	DEC CX
	DEC DX
	INT 10H
	
	MOV CX,SI
	DEC CX
	INT 10H
	
	INC DX
	INT 10H
	
	DEC CX
	INT 10H
	
	MOV DX,DI
	INC DX
	INT 10H
	
	INC CX
	INT 10H
	
	INC DX
	INT 10H
	
	MOV CX,[BP+6]
	INT 10H
	
	DEC DX
	INT 10H
	
	INC CX
	INT 10H
	
	; MAKING THE WHITE LINES
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	MOV AX,WHITE
	MOV AH,0CH
	
	SUB DX,4
	
	INT 10H
	DEC DX 
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	INC CX
	INT 10H
	DEC DX
	INT 10H
	ADD DX,2
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC CX
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	
	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	
	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE

	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE

	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC CX
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H	
	INC CX
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H	

	; MIDDLE LINE
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	
	SUB DX,16
	
	INT 10H
	DEC DX 
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	INC CX
	INT 10H
	DEC DX
	INT 10H
	ADD DX,2
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC CX
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	
	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	
	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE

	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE

	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC CX
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H	
	INC CX
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H	

	; TOP LINE
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	
	SUB DX,27
	
	INT 10H
	DEC DX 
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	INC CX
	INT 10H
	DEC DX
	INT 10H
	ADD DX,2
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC CX
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	
	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	
	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE

	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE

	INC DX
	SUB CX,35
	PUSH CX
	PUSH DX
	ADD CX,35
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC CX
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H	
	INC CX
	SUB DX,3
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H
	INC DX
	INT 10H		
	
	POP BP
	RET 4
DRAW_CANDY1 ENDP

;-------------------------------------------------------------
; PUSH THE LOWER LEFT X AND THEN LOWER LEFT Y AXIS		
;-------------------------------------------------------------
DRAW_CANDY2 PROC
	PUSH BP
	MOV BP,SP
	
	MOV CX,[BP+6]	; X COORDINATE
	MOV DX,[BP+4]	; Y COORDINATE
	MOV AX,YELLOW
	MOV AH,0CH
	MOV BH,0
	
	; ADDING 40 PIXELS
	MOV SI,[BP+6]
	ADD SI,40
	
	DRAW_CD2_LOOP_OUTER:
	
		PUSH CX
		DRAW_CD2_LOOP1:
			INT 10H
			INC CX
			INT 10H
			CMP CX,SI
			JNE DRAW_CD2_LOOP1
		POP CX
		DEC DX
		PUSH CX
		DRAW_CD2_LOOP2:
			INT 10H
			INC CX
			INT 10H
			CMP CX,SI
			JNE DRAW_CD2_LOOP2
		 POP CX
		INC CX
		SUB SI,1
		DEC DX
		
		CMP SI,CX
		JG DRAW_CD2_LOOP_OUTER
		
	; NOW ADDING DETAILS
	MOV SI,[BP+6]
	ADD SI,39
	
	; MAKING THE BOTTOM ROUND
	MOV CX,[BP+6]
	ADD CX,2
	MOV DX,[BP+4]
	
	SUB SI,1
	;SUB DI,1
	
	MOV AX,GREY
	MOV AH,0CH
	
	; LEFT BOTTOM CURVE
	PUSH CX
	PUSH DX
	ADD CX,20
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,20
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,13
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,11
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2	
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,9
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,8
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	ADD CX,2

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	ADD CX,2

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	ADD CX,2

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	ADD CX,2

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	ADD CX,2

	; RIGHT BOTTOM CURVE
	MOV DX,[BP+4]
	MOV CX,SI
	
	PUSH CX
	PUSH DX
	SUB CX,20
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,20
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,13
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,11
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,9
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,8
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,7
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI		

	; REMOVING THE PIXELS LEFT AS GARBAGE
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	DEC DX
	INT 10H
	INC CX
	INT 10H
	INC DX
	INT 10H
	SUB DX,2
	INT 10H
	DEC DX
	INT 10H
	
	MOV CX,SI
	ADD CX,1
	MOV DX,[BP+4]
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H	
	DEC DX
	INT 10H	
	INC CX
	ADD DX,2
	INT 10H
	INC DX
	INT 10H
	
	POP BP
	RET 4
DRAW_CANDY2 ENDP

;-------------------------------------------------------------
; PUSH THE LOWER LEFT X AND THEN LOWER LEFT Y AXIS		
;-------------------------------------------------------------
DRAW_CANDY3 PROC
	PUSH BP
	MOV BP,SP
	
	MOV CX,[BP+6]	; X COORDINATE
	MOV DX,[BP+4]	; Y COORDINATE
	MOV AX,RED
	MOV AH,0CH
	MOV BH,0
	
	SUB DX,7
	
	MOV SI,[BP+6]
	ADD SI,40
	MOV DI,[BP+4]
	SUB DI,30
	
	DRAW_CD3_OUTER:
		PUSH CX
		DRAW_CD3_INNER:
			INT 10H
			ADD CX,1
			CMP CX,SI
			JNE DRAW_CD3_INNER
		POP CX
		DEC DX
		CMP DX,DI
		JNE DRAW_CD3_OUTER	
		
	; NOW MAKING THE SHAPE
	MOV CX,[BP+6]
	MOV DX,DI
	MOV AX,1
	DRAW_CD3_D_LOOP:
		PUSH CX
		PUSH DX
		PUSH AX
		
		; CALLING VERTICAL LINE FUNCTION
		PUSH CX
		PUSH DX
		ADD DX,AX
		PUSH DX
		PUSH GREY
		CALL DRAW_VLINE
		POP AX
		POP DX
		POP CX
		INC AX
		INC CX
		CMP AX,10
		JL DRAW_CD3_D_LOOP
		
	INC DX
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	INC DX
	INT 10H
	INC CX
	DEC DX
	INT 10H
		
	; TOP RIGHT
	MOV AX,1
	MOV CX,SI
	SUB CX,1
	MOV DX,DI
	DRAW_CD3_D_LOOP2:
		PUSH CX
		PUSH DX
		PUSH AX
		
		; CALLING VERTICAL LINE FUNCTION
		PUSH CX
		PUSH DX
		ADD DX,AX
		PUSH DX
		PUSH GREY
		CALL DRAW_VLINE
		POP AX
		POP DX
		POP CX
		INC AX
		DEC CX
		CMP AX,10
		JL DRAW_CD3_D_LOOP2	
		
	INC DX
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	INC DX
	INT 10H
	DEC CX
	DEC DX
	INT 10H		
	
	; BOTTOM RIGHT		
	MOV CX,SI
	SUB CX,2
	MOV DX,[BP+4]
	SUB DX,7
	MOV AX,1
	DRAW_CD3_D_LOOP3:
		PUSH CX
		PUSH DX
		PUSH AX
		
		; CALLING VERTICAL LINE FUNCTION
		PUSH CX
		PUSH DX
		ADD DX,AX
		PUSH DX
		PUSH GREY
		CALL DRAW_VLINE
		
		POP AX
		POP DX
		POP CX
		DEC DX
		DEC CX
		INC AX
		CMP AX,9
		JL DRAW_CD3_D_LOOP3	
			
	MOV AX,GREY
	MOV AH,0CH
	DEC CX
	MOV DX,[BP+4]
	SUB DX,7
	INT 10H
	INC CX
	INT 10H
	DEC DX
	INT 10H
	
	; BOTTOM RIGHT		
	MOV CX,[BP+6]
	ADD CX,1
	MOV DX,[BP+4]
	SUB DX,7
	MOV AX,1
	DRAW_CD3_D_LOOP4:
		PUSH CX
		PUSH DX
		PUSH AX
		
		; CALLING VERTICAL LINE FUNCTION
		PUSH CX
		PUSH DX
		ADD DX,AX
		PUSH DX
		PUSH GREY
		CALL DRAW_VLINE
		
		POP AX
		POP DX
		POP CX
		DEC DX
		INC CX
		INC AX
		CMP AX,9
		JL DRAW_CD3_D_LOOP4	
			
	MOV AX,GREY
	MOV AH,0CH
	MOV DX,[BP+4]
	SUB DX,7
	INT 10H
	DEC DX
	INT 10H
	INC DX
	INC CX
	INT 10H
	
	; MAKING CURVES IN THE SIDES
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	SUB DX,12
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	INC DX
	INC CX
	INT 10H
	INC DX
	INT 10H
	DEC CX
	SUB DX,6
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	INC DX
	INC CX
	INT 10H
	INC DX
	INT 10H
	
	MOV CX,SI
	SUB CX,1
	MOV DX,[BP+4]
	SUB DX,12
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	INC DX
	DEC CX
	INT 10H
	INC DX
	INT 10H
	INC CX
	SUB DX,6
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	DEC DX
	INT 10H
	INC DX
	DEC CX
	INT 10H
	INC DX
	INT 10H	
	
	; 
	
	POP BP
	RET 4
DRAW_CANDY3 ENDP

;-------------------------------------------------------------
; PUSH THE LOWER LEFT X AND THEN LOWER LEFT Y AXIS		
;-------------------------------------------------------------
DRAW_CANDY4 PROC
	PUSH BP
	MOV BP,SP
	
	MOV CX,[BP+6]	; X COORDINATE
	MOV DX,[BP+4]	; Y COORDINATE
	MOV AX,BROWN
	MOV AH,0CH
	MOV BH,0
	
	; ADDING 40 PIXELS SO WE GET 40*40 SQUARE
	MOV SI,[BP+6]
	ADD SI,40
	MOV DI,[BP+4]
	SUB DI,40
	
	ADD CX,20
	INT 10H
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,3
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE
	SUB CX,3
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,5
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,7	
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,7

	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,9
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,9

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,9
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE
	SUB CX,9
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,11
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,11
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,11
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,11
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,13
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,13
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,13
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,13	
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,15
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,15
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,15
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,15
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,17
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,17
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,17
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,17		
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,19
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,19
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,19
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,19
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,21
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,21
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,21
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,21	
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,23
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,23
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,23
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,23
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,25
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,25
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,25
	PUSH CX
	PUSH BROWN
	CALL DRAW_HLINE	
	SUB CX,25	

	; TOP (WHITE PLACE)
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,25
	PUSH CX
	PUSH BLACK
	CALL DRAW_HLINE	
	SUB CX,25	
	
	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,27
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	SUB CX,27	
	
	DEC DX
	SUB CX,2
	PUSH CX
	PUSH DX
	ADD CX,31
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	SUB CX,31	

	DEC DX
	SUB CX,1
	PUSH CX
	PUSH DX
	ADD CX,33
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	SUB CX,33	
	
	DEC DX
	SUB CX,1
	PUSH CX
	PUSH DX
	ADD CX,34
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	SUB CX,34	
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,34
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	SUB CX,34	

	DEC DX
	DEC CX
	PUSH CX
	PUSH DX
	ADD CX,36
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	SUB CX,36	

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,36
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	SUB CX,36		

	DEC DX
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,34
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE	
	SUB CX,34	

	; NOW THE LEFT CURVE ON WHITE TOP
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,9
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,9
	
	DEC DX
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,7

	DEC DX
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,5	
	
	ADD CX,2
	DEC DX
	INT 10H
	
	; RIGHT TOP WHITE PART
	ADD DX,4
	ADD CX,21
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,9
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,9
	
	DEC DX
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,7

	DEC DX
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,5	
	
	ADD CX,2
	DEC DX
	INT 10H	
	
	; THE CENTER WHITE PART
	ADD DX,3
	SUB CX,20
	
	PUSH CX
	PUSH DX
	ADD CX,16
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,16
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,16
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,16

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,16
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,16	
	
	DEC DX
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,14
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,14

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,14
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,14	

	DEC DX
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,12
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,12		
	
	DEC DX
	ADD CX,3
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH WHITE
	CALL DRAW_HLINE
	SUB CX,6
	
	; NOW MARKING COLORS ON THE WHITE PART
	
	SUB CX,2
	ADD DX,3
	MOV AX,RED
	MOV AH,0CH
	INT 10H
	INC CX
	INT 10H
	DEC DX
	INT 10H
	ADD CX,5
	ADD DX,2
	MOV AX,PINK
	MOV AH,0CH
	INT 10H
	INC CX
	INC DX
	INT 10H
	INC CX
	INC DX
	INT 10H
	SUB CX,6
	MOV AX,BLUE
	MOV AH,0CH
	INT 10H
	DEC CX
	INC DX
	INT 10H
	DEC CX
	INC DX
	INT 10H
	DEC CX
	INC DX
	INT 10H	
	ADD CX,18
	SUB DX,4
	MOV AX,BROWN
	MOV AH,0CH
	INT 10H
	INC DX
	INT 10H
	DEC CX
	INT 10H
	ADD CX,2
	DEC DX
	INT 10H
	ADD DX,4
	MOV AX,GREEN
	MOV AH,0CH
	INT 10H
	DEC CX
	INT 10H
	DEC CX
	INT 10H
	SUB CX,10
	ADD DX,3
	INT 10H
	ADD CX,2
	SUB DX,3
	MOV AX,GREY
	MOV AH,0CH
	INT 10H
	SUB CX,17
	MOV AX,PINK
	MOV AH,0CH
	INT 10H
	SUB DX,2
	MOV AX,RED
	MOV AH,0CH
	INT 10H
	INC CX
	INC DX
	INT 10H
	INC CX
	INC DX
	INT 10H
	
	POP BP
	RET 4
DRAW_CANDY4 ENDP

;-------------------------------------------------------------
; PUSH THE LOWER LEFT X AND THEN LOWER LEFT Y AXIS		
;-------------------------------------------------------------
DRAW_CANDY5 PROC
	PUSH BP
	MOV BP,SP
	
	MOV CX,[BP+6]	; X COORDINATE
	MOV DX,[BP+4]	; Y COORDINATE
	MOV AX,L_BLUE
	MOV AH,0CH
	MOV BH,0
	
	; ADDING 40 PIXELS SO WE GET 40*40 SQUARE
	MOV SI,[BP+6]
	ADD SI,40
	MOV DI,[BP+4]
	SUB DI,40
	
	DRAW_CD5_OUTER:
		PUSH CX
		DRAW_CD5_INNER:
			INT 10H
			ADD CX,1
			CMP CX,SI
			JNE DRAW_CD5_INNER
		POP CX
		DEC DX
		CMP DX,DI
		JNE DRAW_CD5_OUTER	
		
	; NOW ADDING DETAILS AND MAKING IT LOOK LIKE A CIRCLE
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	
	SUB SI,1
	SUB DI,1
	
	MOV AX,GREY
	MOV AH,0CH
	
	; LEFT BOTTOM CURVE
	PUSH CX
	PUSH DX
	ADD CX,20
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,20
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,13
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,11
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,9
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,8
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,3
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,2
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,1
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	
	; RIGHT BOTTOM CURVE
	MOV DX,[BP+4]
	MOV CX,SI
	
	PUSH CX
	PUSH DX
	SUB CX,20
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,20
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,13
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,11
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,9
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,8
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,7
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,4
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,4
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,3
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,2
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	DEC DX
	PUSH CX
	PUSH DX
	SUB CX,1
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	; LEFT TOP CURVE
	MOV CX,[BP+6]
	MOV DX,DI
	
	MOV AX,GREY
	MOV AH,0CH

	PUSH CX
	PUSH DX
	ADD CX,19
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,16
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,13
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,11
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,9
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,8
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,3
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,2
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,1
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,[BP+6]	
	
	; RIGHT TOP CURVE
	MOV DX,DI
	MOV CX,SI
	
	PUSH CX
	PUSH DX
	SUB CX,19
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI
	
	INC DX
	PUSH CX
	PUSH DX
	SUB CX,16
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI
	
	INC DX
	PUSH CX
	PUSH DX
	SUB CX,13
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,11
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	INC DX
	PUSH CX
	PUSH DX
	SUB CX,9
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,8
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,7
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	
	
	INC DX
	PUSH CX
	PUSH DX
	SUB CX,6
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,5
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,4
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,4
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,3
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,2
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	INC DX
	PUSH CX
	PUSH DX
	SUB CX,1
	PUSH CX
	PUSH GREY
	CALL DRAW_HLINE
	MOV CX,SI	

	; DARKENING THE CENTER RING
	
	; UPPER RING
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	SUB DX,24
	
	PUSH CX
	PUSH DX
	ADD CX,3
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE
	SUB CX,1
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,17
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1	
	
	; LOWER RING
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	SUB DX,16
	
	PUSH CX
	PUSH DX
	ADD CX,3
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE
	SUB CX,1
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,17
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH BLUE
	CALL DRAW_HLINE	
	SUB CX,1	

	; DETAILS TO THE TOP CURVE
	MOV CX,[BP+6]
	MOV DX,[BP+4]
	INC CX
	SUB DX,25
	MOV AX,BLUE
	MOV AH,0CH
	INT 10H
	INC CX
	DEC DX
	INT 10H
	INC CX
	DEC DX
	INT 10H
	DEC CX
	ADD DX,2
	INT 10H
	INC CX
	INT 10H
	DEC DX
	INT 10H
	ADD DX,2
	INT 10H
	
	MOV CX,SI
	MOV DX,[BP+4]
	DEC CX
	SUB DX,25
	MOV AX,BLUE
	MOV AH,0CH
	INT 10H
	DEC CX
	DEC DX
	INT 10H
	DEC CX
	DEC DX
	INT 10H	
	INC CX
	ADD DX,2
	INT 10H
	DEC CX
	INT 10H
	DEC DX
	INT 10H
	ADD DX,2
	INT 10H	
	
	
	POP BP
	RET 4
DRAW_CANDY5 ENDP
;--------------------------------------------------------------
; DRAWS THE SCORE BAR	; IN THE IMPLEMENTATION PART WE WILL 
; ADD FUNCTIONALITY TO THIS PROC
;--------------------------------------------------------------
DRAW_SCORE_BAR PROC
	
	MOV CX,550
	MOV DX,50
	DRAW_SCORE_BAR_LOOP:
		PUSH CX
		PUSH DX
		
		PUSH CX
		PUSH DX
		MOV DX,440
		PUSH DX
		PUSH L_BLUE
		CALL DRAW_VLINE
		
		POP DX
		POP CX
		INC CX
		CMP CX,570
		JL DRAW_SCORE_BAR_LOOP
	
	RET
DRAW_SCORE_BAR ENDP

;----------------------------------------------------------------
; DISPLAY THE FIRST SCREEN
;----------------------------------------------------------------
DRAW_MAIN_SCREEN PROC
	
	; DISPLAYING THE CANDY CRUSH LOGO
	
	MOV DX,50
	MOV CX,100
	MOV SI,0
	MOV AX,1
	
	DRAW_MAIN_SCREEN_LO:
		MOV SI,CX
		ADD SI,20
		DRAW_MAIN_SCREEN_LI:
			PUSH CX
			PUSH DX
			PUSH AX
			PUSH SI
			; DRAWING THE LINE
			PUSH CX
			PUSH DX
			ADD DX,270
			PUSH DX
			PUSH AX
			CALL DRAW_VLINE
			
			POP SI
			POP AX
			POP DX
			POP CX
			INC CX
			CMP CX,SI
			JL DRAW_MAIN_SCREEN_LI
			
		; CHANGE THE COLOR
		INC AX
		CMP AX,0AH
		JL DRAW_MAIN_SCREEN_LO
		
		MOV AX,1H
		DRAW_MAIN_SCREEN_LO1:
		MOV SI,CX
		ADD SI,20
		DRAW_MAIN_SCREEN_LI1:
			PUSH CX
			PUSH DX
			PUSH AX
			PUSH SI
			; DRAWING THE LINE
			PUSH CX
			PUSH DX
			ADD DX,270
			PUSH DX
			PUSH AX
			CALL DRAW_VLINE
			
			POP SI
			POP AX
			POP DX
			POP CX
			INC CX
			CMP CX,SI
			JL DRAW_MAIN_SCREEN_LI1
			
		; CHANGE THE COLOR
		INC AX
		CMP AX,0EH
		JL DRAW_MAIN_SCREEN_LO1	
		
	; NOW TRYING TO WRITE CANDY CRUSH
	MOV CX,100
	MOV DX,50
	
	PUSH CX
	PUSH DX
	ADD DX,60
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,60

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,41
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,41
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,37
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,37
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,34
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,34	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,31
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,31	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,28
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,28
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,26
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,26

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,24
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,24
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,22
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,22	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,18
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,18
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,17	

	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,16
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,16	

	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,15
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,15		

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,15
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,15
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14		

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,13
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,13
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,13
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,13
	
	MOV AX,0
	DRAW_MAIN_SCREEN_L_C:
		PUSH AX
		
		INC CX
		PUSH CX
		PUSH DX
		ADD DX,12
		PUSH DX
		PUSH BLACK
		CALL DRAW_VLINE
		SUB DX,12
		
		POP AX
		INC AX
		CMP AX,25
		JL DRAW_MAIN_SCREEN_L_C
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,13
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,13
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,13
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,13
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,13
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,13
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,13
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,13
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,14
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,60
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,60	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,57
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,57	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,57
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,57

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,57
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,57

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,56
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,56	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,54
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,54	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,54
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,54	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,54
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,54	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,51
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,51	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,51
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,51

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,51
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,51	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,49
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,49		

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,51
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,51	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,51
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,51

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,51
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,51	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,54
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,54	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,54
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,54	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,54
	PUSH DX
	PUSH BLACK
	CALL DRAW_VLINE
	SUB DX,54	

	RET
DRAW_MAIN_SCREEN ENDP

;----------------------------------------------------------------
; DRAWS THE OPTIONS SCREEN DISPLAYING THE MENU
;----------------------------------------------------------------
DRAW_OPTIONS_SCREEN PROC	
	
	
	; DRAW THE OPTIONS
	PUSH BLUE
	PUSH YELLOW
	CALL DRAW_OPTION1_BOX
	
	PUSH BLUE
	PUSH YELLOW
	CALL DRAW_OPTION2_BOX
	
	; DIPLAY THE MOUSE
	MOV AX,1
	INT 33H
	
	; NOW WE MAKE A MOUSE LOOP
	OPTIONS_MENU_LOOP:
		; GET MOUSE STATUS
		MOV AX,3
		INT 33H

		.IF(BL == 1)
			.IF(CX > OPTION_X_S && CX < OPTION_X_E && DX > OPTION1_Y_E && DX < OPTION1_Y_S)
				MOV OPTION_CHOSEN,0 
				JMP OPTION_SELECTED
			.ENDIF
			
			.IF(CX > OPTION_X_S && CX < OPTION_X_E && DX > OPTION2_Y_E && DX < OPTION2_Y_S)
				MOV OPTION_CHOSEN,1
				JMP OPTION_SELECTED
			.ENDIF
		.ENDIF
		
		
		; CALL PAUSE_MOUSE_CHECK_LONG
		JMP OPTIONS_MENU_LOOP
	
	OPTION_SELECTED:
	RET
DRAW_OPTIONS_SCREEN ENDP

;---------------------------------------------------------------
; DISPLAY A BOX AROUND AN OPTION IN THE OPTION SCREEN
; PUSH THE COLOR BACKGROUNG AND THEN TEXTCOLOR
;---------------------------------------------------------------
DRAW_OPTION1_BOX PROC
	PUSH BP
	MOV BP,SP

	MOV CX,OPTION_X_S
	MOV SI,OPTION_X_E
	MOV DX,OPTION1_Y_S
	MOV DI,OPTION1_Y_E
	MOV AX,[BP+6]
	MOV AH,0CH
	
	OPTION_BOX_LOOP_OUTER:
		MOV CX,OPTION_X_S
		
		OPTION_BOX_LOOP_INNER:
			
			INT 10H
			INC CX
			
			CMP CX,SI
			JNE OPTION_BOX_LOOP_INNER

		DEC DX
		CMP DX,DI
		JNE OPTION_BOX_LOOP_OUTER
		
	; NOW WE WRITE THE OPTION VALUE
	; FOR OPTION1 IT IS NEW GAME
	
	MOV CX,OPTION_X_S
	MOV DX,OPTION1_Y_E
	
	ADD CX,24
	ADD DX,15
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,5
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,5
	
	INC CX
	ADD DX,4
	PUSH CX
	PUSH DX
	ADD DX,5
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,5	
	
	INC CX
	ADD DX,4
	PUSH CX
	PUSH DX
	ADD DX,5
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,5	

	INC CX
	ADD DX,4
	PUSH CX
	PUSH DX
	ADD DX,5
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,5	

	INC CX
	ADD DX,4
	PUSH CX
	PUSH DX
	ADD DX,4
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,4	
	
	SUB DX,16
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	;-----E-----
	
	ADD CX,4
	
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20	
	
	; VERTICAL LINES OF E
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	ADD DX,6
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	ADD DX,6
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	; W
	
	ADD CX,7
	
	PUSH CX
	PUSH DX
	ADD	 CX,13
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,13
	
	DEC DX
	PUSH CX
	PUSH DX
	ADD	 CX,13
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,13

	DEC DX
	PUSH CX
	PUSH DX
	ADD	 CX,13
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,13	
	
	SUB DX,17
	
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17	
	
	ADD CX,2
	
	ADD DX,5
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,12
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,12

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,12
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,12	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,12
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,12	
	
	ADD CX,2
	SUB DX,5
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17	

	; GAME
	
	ADD CX,10
	
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20	

	INC CX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7

	ADD DX,14
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE	
	
	SUB CX,3
	SUB DX,7
	
	PUSH CX
	PUSH DX
	ADD DX,5
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,5
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,5
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,5	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,5
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,5
	
	; A
	
	SUB DX,12
	ADD CX,3
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	ADD DX,6
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	SUB DX,10
	ADD CX,4
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20		
	
	; M
	
	ADD CX,4
	
	PUSH CX
	PUSH DX
	ADD	 CX,13
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,13
	
	INC DX
	PUSH CX
	PUSH DX
	ADD	 CX,13
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,13

	INC DX
	PUSH CX
	PUSH DX
	ADD	 CX,13
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,13	
	
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17	
	
	ADD CX,2
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,12
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,12

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,12
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,12	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,12
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,12	
	
	ADD CX,2
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17	

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,17
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,17

	;-----E-----
	
	SUB DX,2
	
	ADD CX,4
	
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH[BP+4]
	CALL DRAW_VLINE
	SUB DX,20	
	
	; VERTICAL LINES OF E
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	ADD DX,6
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	ADD DX,6
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	POP BP
	RET 4
DRAW_OPTION1_BOX ENDP

;---------------------------------------------------------------
; DISPLAY A BOX AROUND AN OPTION IN THE OPTION SCREEN
; PUSH THE COLOR BACKGROUNG AND THEN TEXTCOLOR
;---------------------------------------------------------------
DRAW_OPTION2_BOX PROC
	PUSH BP
	MOV BP,SP

	MOV CX,OPTION_X_S
	MOV SI,OPTION_X_E
	MOV DX,OPTION2_Y_S
	MOV DI,OPTION2_Y_E
	MOV AX,[BP+6]
	MOV AH,0CH
	
	OPTION_BOX_LOOP_OUTER:
		MOV CX,OPTION_X_S
		
		OPTION_BOX_LOOP_INNER:
			
			INT 10H
			INC CX
			
			CMP CX,SI
			JNE OPTION_BOX_LOOP_INNER

		DEC DX
		CMP DX,DI
		JNE OPTION_BOX_LOOP_OUTER

	; NOW WE WRITE THE OPTION VALUE
	; FOR OPTION1 IT IS RULES
	
	MOV CX,OPTION_X_S
	MOV DX,OPTION2_Y_E
	
	ADD CX,30
	ADD DX,15
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7	
	
	ADD DX,9
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE

	SUB DX,13
	
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,14
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,14
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,14
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE

	SUB CX,5
	
	PUSH CX
	PUSH DX
	ADD DX,6
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,6
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,6
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,6
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,6
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,6
	
	ADD CX,6
	SUB DX,14
	
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	ADD DX,17
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,6

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,6

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	
	SUB DX,19
	
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20	
	
	;L
	ADD CX,4
	
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20	
	
	INC CX
	ADD DX,17
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,6

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,6

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,6
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE

	ADD CX,3
	SUB DX,19
	; E
	
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,20
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,20	
	
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	ADD DX,6
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	ADD DX,6
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,5	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,5
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	
	ADD CX,3
	SUB DX,19

	; S
	
	PUSH CX
	PUSH DX
	ADD DX,11
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,11
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,11
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,11

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,11
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,11
	
	INC CX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,7
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,7	
	
	ADD DX,6
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,4	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,4	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,4
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	
	SUB DX,2

	PUSH CX
	PUSH DX
	ADD DX,8
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,8
	
	INC CX
	PUSH CX
	PUSH DX
	ADD DX,8
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE
	SUB DX,8

	INC CX
	PUSH CX
	PUSH DX
	ADD DX,8
	PUSH DX
	PUSH [BP+4]
	CALL DRAW_VLINE

	SUB CX,9
	
	PUSH CX
	PUSH DX
	ADD CX,10
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,10
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,10
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,10	
	
	INC DX
	PUSH CX
	PUSH DX
	ADD CX,10
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,10	

	INC DX
	PUSH CX
	PUSH DX
	ADD CX,10
	PUSH CX
	PUSH [BP+4]
	CALL DRAW_HLINE
	SUB CX,10		
	

	POP BP
	RET 4
DRAW_OPTION2_BOX ENDP

;----------------------------------------------------------------
; RULES
;----------------------------------------------------------------
SHOW_RULES PROC

	; CLEAR THE SCREEN
	MOV AH,0
	MOV AL,12H
	INT 10H
	
	MOV DX,OFFSET RULES_ARR0
	MOV AH,09H
	INT 21H

	MOV DX,OFFSET RULES_ARR1
	MOV AH,09H
	INT 21H
	
	MOV DX,OFFSET RULES_ARR2
	MOV AH,09H
	INT 21H
	
	MOV DX,OFFSET RULES_ARR3
	MOV AH,09H
	INT 21H
	
	; WAIT FOR A KEY PRESS
	MOV AX,0
	INT 16H
	
	; CLEAR THE SCREEN
	MOV AH,0
	MOV AL,12H
	INT 10H
	
	RET
SHOW_RULES ENDP

;----------------------------------------------------------------
; SWAPPING AND CHECKING FOR SWAP FUNCTION
;----------------------------------------------------------------
GAMMING_FUNC PROC

	; GET THE MOUSE STATUS
	MOV AX,3
	INT 33H
	
	; IF WE HAVE A LEFT CLICK THEN CHECK WHERE DID THE CLICK OCCUR
	.IF(BL == 1)
		MOV MC_X,CX
		MOV MC_Y,DX
		
		; ADD 57 TO GET THE CORRESPONDING VALUE FOR THE ARRAY		; SINCE THE BOX IN THE GAME IS 57*57
		MOV CX,G_X_START
		MOV DX,G_Y_START
		
		; BX WILL STORE THE X VALUE
		; AX WILL STORE THE Y VALUE
		MOV BX,0
		MOV AX,0
		
		FINDING_X_VAL_LOOP:
			CMP CX,MC_X
			JG FINDING_Y_VAL_LOOP
			ADD CX,57
			ADD BX,1
			JMP FINDING_X_VAL_LOOP
			
		FINDING_Y_VAL_LOOP:
			CMP DX,MC_Y
			JG FOUND_X_Y
			ADD DX,57
			ADD AX,1
			JMP FINDING_Y_VAL_LOOP
			
		FOUND_X_Y:
		
		DEC AX
		DEC BX
		
		; CHECK IF THE MOUSE WAS CLICKED IN THE GAMING AREA OR NOT
		CMP AX,0
		JL SKIP_ALL
		CMP AX,6
		JG SKIP_ALL
		CMP BX,0
		JL SKIP_ALL
		CMP BX,6
		JG SKIP_ALL
		
		CALL SWAP_CANDIES
		
		SKIP_ALL:
		
		CALL PAUSE_MOUSE_CHECK
	.ENDIF
	
	RET
GAMMING_FUNC ENDP

;---------------------------------------------------------------------
; THIS FUNCTION SLOWS DOWN THE RATE AT WHICH THE MOUSE IS CHECKED
;---------------------------------------------------------------------
PAUSE_MOUSE_CHECK PROC
	
	MOV CX,0FFFFH
	MOUSE_CHECK_PAUSE_LOOP1:
		
		LOOP MOUSE_CHECK_PAUSE_LOOP1
		
	MOV CX,0FFFFH
	MOUSE_CHECK_PAUSE_LOOP2:
		
		LOOP MOUSE_CHECK_PAUSE_LOOP2	
	
	MOV CX,0FFFFH
	MOUSE_CHECK_PAUSE_LOOP3:
		
		LOOP MOUSE_CHECK_PAUSE_LOOP3	

	MOV CX,0FFFFH
	MOUSE_CHECK_PAUSE_LOOP4:
		
		LOOP MOUSE_CHECK_PAUSE_LOOP4

	MOV CX,0FFFFH
	MOUSE_CHECK_PAUSE_LOOP5:
		
		LOOP MOUSE_CHECK_PAUSE_LOOP5		
	
	RET
PAUSE_MOUSE_CHECK ENDP

PAUSE_MOUSE_CHECK_LONG PROC
	
	MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP1:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP1
		
	MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP2:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP2	
	
	MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP3:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP3	

	MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP4:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP4

	MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP5:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP5		
	
	MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP6:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP6
		
	MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP7:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP7

			MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP8:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP8
		
			MOV CX,0FFFFH
	LMOUSE_CHECK_PAUSE_LOOP9:
		
		LOOP LMOUSE_CHECK_PAUSE_LOOP9	
	
	RET
PAUSE_MOUSE_CHECK_LONG ENDP

;--------------------------------------------------------------------------------------
; THIS FUNCTION WILL SWAP THE CANDIES IN THE ARRAY ; AX CONTAINS THE ROW NUMBER AND BX
; CONTAINS THE COL NUMBER
;--------------------------------------------------------------------------------------
SWAP_CANDIES PROC
	
	INC SELECTED_CANDIES
	MOV CL,SELECTED_CANDIES
	
	.IF(CL == 1)
		MOV CANDY_1_R,AX
		MOV CANDY_1_C,BX
	.ELSEIF(CL == 2)
		MOV CANDY_2_R,AX
		MOV CANDY_2_C,BX
		
		
		; NOW THE SWAPPING PROCESS
		
		; FIRST WE CHECK IF THE CANDIES ARE ADJACENT
		MOV AX,CANDY_1_C
		SUB AX,CANDY_2_C
		JNS SKIP_ABS
			NEG AX		; TAKE THE 2'S COMPLEMENT
		SKIP_ABS:
		CMP AX,1
		JG SKIP_SWAP
		MOV BX,AX		; CHECKING DIAGONAL SWAP
		MOV AX,CANDY_1_R
		SUB AX,CANDY_2_R
		JNS SKIP_ABS2
			NEG AX		; TAKE THE 2'S COMPLEMENT
		SKIP_ABS2:
		CMP AX,1
		JG SKIP_SWAP
		ADD BX,AX
		CMP BX,1
		JG SKIP_SWAP

		; NOW CHECK IF THE SAME CANDY HAS BEEN CLICKED TWICE THEN SWAPPING DOES NOT OCCUR
		MOV AX,CANDY_1_R
		.IF(AX == CANDY_2_R)
			MOV AX, CANDY_1_C
			
			.IF(AX == CANDY_2_C)
				CALL DESTROY_CANDIES
				CALL DRAW_CANDIES
				JMP SKIP_SWAP
			.ENDIF
		.ENDIF
		
		;FIRST HIDE THE MOUSE SO IT DOES NOT CHANGE THE PIXELS
		MOV AX,00
		INT 33H
		
		; FIRST SWAP THE CANDIES ON THE SCREEN
		
		; WE DRAW A GREY SQAURE ON THE SELECTED CANDIES
		; FOR CANDY 1
		MOV AX,CANDY_1_C
		MOV BL,2
		MUL BL
		MOV BX,OFFSET B_X
		ADD BX,AX
		MOV AX,[BX]
		PUSH AX
		MOV AX,CANDY_1_R
		MOV BL,2
		MUL BL
		MOV BX,OFFSET B_Y
		ADD BX,AX
		MOV AX,[BX]
		PUSH AX
		CALL DRAW_GREY_SQUARE
		
		; FOR CANDY 2
		MOV AX,CANDY_2_C
		MOV BL,2
		MUL BL
		MOV BX,OFFSET B_X
		ADD BX,AX
		MOV AX,[BX]
		PUSH AX
		MOV AX,CANDY_2_R
		MOV BL,2
		MUL BL
		MOV BX,OFFSET B_Y
		ADD BX,AX
		MOV AX,[BX]
		PUSH AX
		CALL DRAW_GREY_SQUARE
		
		; NOW WE SWAP THE ARRAY LOCATIONS
		MOV AX,CANDY_1_R
		MOV BL,7
		MUL BL
		ADD AX,CANDY_1_C
		MOV SI,OFFSET CANDIES_ARR
		ADD SI,AX
		
		MOV AX,CANDY_2_R
		MOV BL,7
		MUL BL
		ADD AX,CANDY_2_C
		MOV DI,OFFSET CANDIES_ARR
		ADD DI,AX
		
		MOV BL,BYTE PTR[SI]
		MOV BH,BYTE PTR[DI]
		
		; IF WE HAVE ONE/TWO BLOCKED BOX CLICKED THEN WE SKIP THE SWAPPING
		.IF(BL == 9 || BH == 9)
			MOV AX,01
			INT 33H
			JMP SKIP_SWAP
		.ENDIF
		
		MOV BYTE PTR[SI],BH
		MOV BYTE PTR[DI],BL
		
		
		; NOW DRAW THE CANDIES AGAIN
		CALL DRAW_CANDIES
		
		; NOW CALL THE POP CANDIES FUNCTION TO DESTROY THE SWAPPED CANDIES
		CALL DESTROY_CANDIES
			
		; NOW DRAW THE CANDIES AGAIN
		CALL DRAW_CANDIES
		
		DEC MOVES_COUNT
		
		; NOW DISPLAY THE MOUSE
		MOV AX,01
		INT 33H
		
		SKIP_SWAP:
		MOV SELECTED_CANDIES,0		; SET THE SELECTD CANDIES BACK TO ZERO FOR THE NEXT MOVE
	.ENDIF
	
	
	
	RET
SWAP_CANDIES ENDP

;--------------------------------------------------------------
; DRAWS GREY SQUARE PUSH X COORDINATE THEN Y COORDINATE
;--------------------------------------------------------------
DRAW_GREY_SQUARE PROC
	PUSH BP
	MOV BP,SP
	
	MOV CX,[BP+6]	; X COORDINATE
	MOV DX,[BP+4]	; Y COORDINATE
	MOV AX,GREY
	MOV AH,0CH
	MOV BH,0
	
	; ADDING 40 PIXELS SO WE GET 40*40 SQUARE
	MOV SI,[BP+6]
	ADD SI,40
	MOV DI,[BP+4]
	SUB DI,40
	
	DRAW_GREY_S_OUTER:
		PUSH CX
		DRAW_GREY_S_INNER:
			INT 10H
			ADD CX,1
			CMP CX,SI
			JNE DRAW_GREY_S_INNER
		POP CX
		DEC DX
		CMP DX,DI
		JNE DRAW_GREY_S_OUTER
		
	
	POP BP
	RET 4
DRAW_GREY_SQUARE ENDP

;---------------------------------------------------------------------
; DESTROYS ADJACENT CANDIES IN THE CANDIES ARRAY BY SETTING THEM TO 0
;---------------------------------------------------------------------
DESTROY_CANDIES PROC
	
	; CHECK FOR 3 ADJACENT CANDIES
	MOV SI,OFFSET CANDIES_ARR
	
	; CHECK FOR HORIZONTAL LINES
	MOV BH,0		; THIS WILL ENSURE DESTRUCTION IN A ROW ONLY
	MOV CL,48
	DESTROY_CANDIES_LOOP:
		MOV AH,BYTE PTR[SI]
		MOV AL,BYTE PTR[SI+1]
		MOV BL,BYTE PTR[SI+2]
		
		.IF(AH == AL && AH == BL && AH != 0 && AH != 9)
			MOV BYTE PTR[SI],0
			MOV BYTE PTR[SI+1],0
			MOV BYTE PTR[SI+2],0
			ADD SCORE,3
			
			.IF(BYTE PTR[SI+3] == AH && BH != 4)
				MOV BYTE PTR[SI+3],0
				ADD SCORE,1
				
				.IF(BYTE PTR[SI+4] == AH && BH != 3)
					MOV BYTE PTR[SI+4],0
					ADD SCORE,1
				.ENDIF
			.ENDIF
			
		.ENDIF
		INC SI
		INC BH
		
		.IF(BH == 5)
			MOV BH,0
			INC SI
			INC SI
			DEC CL
			DEC CL
		.ENDIF
		LOOP DESTROY_CANDIES_LOOP
		
	; NOW CHECKING VERTICAL COMBINATIONS
	MOV SI,OFFSET CANDIES_ARR
	
	; RESETING THE REGISTERS
	MOV AX,0
	MOV BX,0
	MOV CX,0
	
	MOV CL,34
	DESTROY_CANDIES_LOOP2:
		; CHECK AT INTERVALS OF 7
		MOV AH,BYTE PTR[SI]
		MOV AL,BYTE PTR[SI+7]
		MOV BL,BYTE PTR[SI+14]

		.IF(AH == AL && AH == BL && AH != 0 && AH != 9)
			MOV BYTE PTR[SI],0
			MOV BYTE PTR[SI+7],0
			MOV BYTE PTR[SI+14],0
			ADD SCORE,3
			
			.IF(BYTE PTR[SI+21] == AH)
				MOV BYTE PTR[SI+21],0
				ADD SCORE,1
				
				.IF(BYTE PTR[SI+28] == AH)
					MOV BYTE PTR[SI+28],0
					ADD SCORE,1
				.ENDIF
			.ENDIF
			
		.ENDIF
		
		INC SI
		
		LOOP DESTROY_CANDIES_LOOP2
	
	; FIRST DRAW THE DESTROYED CANDIES WHITE SPACES
	CALL DRAW_CANDIES
	; THEN PERFORM THE FALL DOWN AND FILLING EFFECT
	CALL FILL_AFTER_DESTROY
	RET
DESTROY_CANDIES ENDP

;----------------------------------------------------------------------
; GENERATE A RANDOM NUMBER AND RETURNS IN RANDOM NUMBER VARIABLE
;----------------------------------------------------------------------
GENERATE_RANDOM_NUMBER PROC
	
	; CALL SYSTEM TIME INTEREPT
	MOV AH,0
	INT 1AH
	
	MOV AX,DX	; NUMBER OF CLOCKS IS IN DX
	MOV AH,0
	MOV DX,0
	MOV BL,5	; GENERATE A RANDOM NUMBER BETWEEN 0-4
	DIV BL
	MOV RANDOM_NUMBER,AH	; GET THE REMAINDER
	ADD RANDOM_NUMBER,1		; SO WE HAVE A RANDOM NUMBER BETWEEN 1-5
	
	; NOW WE SLOW DOWN THE TIME
	CALL PAUSE_MOUSE_CHECK
	
	RET
GENERATE_RANDOM_NUMBER ENDP


;----------------------------------------------------------------------
; NOW FILLING FROM THE TOP IN THE ARRAY
;----------------------------------------------------------------------
FILL_AFTER_DESTROY PROC 


	FILL_ARR_AGAIN_LOOP_OUTER:
		MOV SI,OFFSET CANDIES_ARR
		ADD SI,7
		MOV CX,41
		MOV BOOL_SWAP,0		;THE SWAP VARIABLE 
		FILL_ARR_AGAIN_LOOP_INNER:
			
			MOV AL,BYTE PTR[SI]
			
			.IF(AL == 0 && AL != 9)
				MOV AH,BYTE PTR[SI-7]
				
				.IF(AH == 9)
					PUSH CX
					CALL GENERATE_RANDOM_NUMBER
					POP CX
					MOV AH,RANDOM_NUMBER
					MOV BYTE PTR[SI],AH
					JMP LOCKED_CELL
				.ENDIF
				
				.IF(AH == 0 && AH != 9)	; ONLY WHEN CANDIES ARE DESTROYED VERTICALLY
					PUSH CX
					CALL GENERATE_RANDOM_NUMBER
					POP CX
					MOV AH,RANDOM_NUMBER
				.ENDIF
				
				MOV BYTE PTR[SI],AH
				MOV BYTE PTR[SI-7],0
				
				LOCKED_CELL:
					MOV BOOL_SWAP,1
			.ENDIF
			
			INC SI
			
			LOOP FILL_ARR_AGAIN_LOOP_INNER
		
		CALL DRAW_CANDIES
		
		CMP BOOL_SWAP,0
		JNE FILL_ARR_AGAIN_LOOP_OUTER
		
	; NOW WE FILL THE TOP ROW
		
	MOV CX,7
	MOV SI,OFFSET CANDIES_ARR
	
	FILL_ARR_AGAIN_LOOP_UPPER_ROW:
	
		MOV AL,BYTE PTR[SI]
		.IF(AL != 9)
			.IF(AL == 0)
				PUSH CX
				CALL GENERATE_RANDOM_NUMBER
				POP CX
				MOV AL,RANDOM_NUMBER
				MOV BYTE PTR[SI],AL
			.ENDIF
		.ENDIF
		INC SI
		
		LOOP FILL_ARR_AGAIN_LOOP_UPPER_ROW	
	CALL DRAW_CANDIES	
			
		
	RET
FILL_AFTER_DESTROY ENDP

;-------------------------------------------------------------------------------------
; DISPLAYING THE SCORE
;-------------------------------------------------------------------------------------
DISPLAY_TITLE_BAR PROC
	; CLEAR THE PREVIOUS MESSAGE AND THEN DISPLAY THE SCORE
	
	MOV DX,13
	MOV AH,02H
	INT 21H
	
	MOV DX,OFFSET _PLAYER_NAME
	MOV AH,09H
	INT 21H
	
	MOV DX,OFFSET SCORE_DISPLAY_MSG
	MOV AH,09H
	INT 21H
	
	PUSH SCORE
	MOV DX,SCORE
	CALL DISPLAY_MULTIDIGIT
	POP SCORE
	
	MOV DX,OFFSET MOVES_PROMPT
	MOV AH,09H
	INT 21H
	
	PUSH MOVES_COUNT
	MOV DX,MOVES_COUNT
	CALL DISPLAY_MULTIDIGIT
	POP MOVES_COUNT
	
	MOV DX,' '
	MOV AH,02H
	INT 21H

	RET
DISPLAY_TITLE_BAR ENDP

;--------------------------------------------------------------------------
; DISPLAYS ANY MULTIPDIGIT NUMBER STORED IN DX REGISTER
;--------------------------------------------------------------------------
DISPLAY_MULTIDIGIT PROC
	MOV CX,0
	
	PUSH_PART:
		MOV AX,DX
		MOV BL,10
		DIV BL
		
		MOV TEMP,AL
		MOV AL,AH
		MOV AH,00
		
		PUSH AX
		INC CX
		MOV AX,00
		MOV AL,TEMP
		MOV DX,AX
		
		CMP DX,00
		JG PUSH_PART
		
	POP_PART:
		POP DX
		DEC CX
		ADD DX,'0'
		MOV AH,02H
		INT 21H
		
		CMP CX,00
		JNE POP_PART
		
	RET
DISPLAY_MULTIDIGIT ENDP

;--------------------------------------------------------------------------
; PROCEDURE TO TAKE NAME FROM THE USER
;--------------------------------------------------------------------------
INPUT_NAME PROC
	MOV DX,OFFSET NAME_MSG
	MOV AH,09H
	INT 21H

	MOV SI,OFFSET _PLAYER_NAME
	INPUT_NAME_LOOP:
		MOV AH,01H
		INT 21H
		
		CMP AL,13	; IF ENTER KEY IS PRESSED THEN END
		JE END_NAME
		MOV BYTE PTR[SI],AL
		INC SI
		JMP INPUT_NAME_LOOP
	
	END_NAME:
	RET
INPUT_NAME ENDP

WRITEFILE PROC  

    ; OPEN FILE
    MOV DX, OFFSET FILENAME
    MOV CX, 0
	MOV AL,2
    MOV AH,3DH
    INT 21H
    MOV FILEPOINTER, AX

    ; WRITE TO FILE
    MOV DX, OFFSET _PLAYER_NAME
    MOV CX, _PLAYER_NAME_LEN  ;SIZE OF DATA
    MOV BX, FILEPOINTER
    MOV AH, 40H
    INT 21H

    ; CLOSE FILE
    MOV BX, FILEPOINTER
    MOV AH, 3EH
    INT 21H 
    
    RET
WRITEFILE ENDP

END MAIN
